// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace FlightService.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FlightServiceAPI.
    /// </summary>
    public static partial class FlightServiceAPIExtensions
    {
            /// <summary>
            /// Retrieves all Flights matching the provided property parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='departureLocation'>
            /// </param>
            /// <param name='arrivalLocation'>
            /// </param>
            /// <param name='date'>
            /// </param>
            /// <param name='basePrice'>
            /// </param>
            public static FlightsResponse Get(this IFlightServiceAPI operations, string departureLocation = default(string), string arrivalLocation = default(string), string date = default(string), int? basePrice = default(int?))
            {
                return operations.GetAsync(departureLocation, arrivalLocation, date, basePrice).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Flights matching the provided property parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='departureLocation'>
            /// </param>
            /// <param name='arrivalLocation'>
            /// </param>
            /// <param name='date'>
            /// </param>
            /// <param name='basePrice'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlightsResponse> GetAsync(this IFlightServiceAPI operations, string departureLocation = default(string), string arrivalLocation = default(string), string date = default(string), int? basePrice = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(departureLocation, arrivalLocation, date, basePrice, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='flightRequest'>
            /// </param>
            public static FlightResponse Post(this IFlightServiceAPI operations, FlightRequest flightRequest = default(FlightRequest))
            {
                return operations.PostAsync(flightRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='flightRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlightResponse> PostAsync(this IFlightServiceAPI operations, FlightRequest flightRequest = default(FlightRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(flightRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a specific Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static FlightResponse Get1(this IFlightServiceAPI operations, System.Guid id)
            {
                return operations.Get1Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlightResponse> Get1Async(this IFlightServiceAPI operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specific existing Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='flightRequest'>
            /// </param>
            public static FlightResponse Put(this IFlightServiceAPI operations, System.Guid id, FlightRequest flightRequest = default(FlightRequest))
            {
                return operations.PutAsync(id, flightRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specific existing Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='flightRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlightResponse> PutAsync(this IFlightServiceAPI operations, System.Guid id, FlightRequest flightRequest = default(FlightRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(id, flightRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specific Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Delete(this IFlightServiceAPI operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specific Flight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IFlightServiceAPI operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
